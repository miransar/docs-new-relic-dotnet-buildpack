---
title: Using New Relic Dotnet Extension Buildpack for VMware Tanzu
owner: Partners
---

This topic describes how to use New Relic Dotnet Extension Buildpack for VMware Tanzu.


## <a id='using'></a> About Using New Relic Dotnet Extension Buildpack for VMware Tanzu

New Relic extension buildpacks allow you to use Dotnet agents in various ways
to make it easy and convenient to bind apps to a New Relic service.

### <a id='how-it-works'></a> How the New Relic Extension Buildpack for VMware Tanzu Works

The buildpack extensions bind to the New Relic Dotnet agent using one of the following ways depending on the environment:
1. If an environment variable named `"NEW_RELIC_DOWNLOAD_URL"` is defined in the app environment
(manifest file, cf set-env, or set in Apps Manager), its value is used as the location to download the agent.
This is used for environments where you have your own repository for downloading dependencies (i.e. Artifactory).
If a second environment variable called `"NEW_RELIC_DOWNLOAD_SHA256"` is set in the app environment,
it is expected to hold the downloaded agent's binary file SHA256 checksum.
In this case the SHA256 checksum of the downloaded agent binary file is compared with this value, and in the case of a mismatch, the buildpack reports an error.

1. If you want the buildpack to use a specific version of New Relic agent, you could define an environment variable `"NEW_RELIC_AGENT_VERSION"` with the desired agent version. Please note that if you use both `"NEW_RELIC_DOWNLOAD_URL"` and `"NEW_RELIC_AGENT_VERSION"` together, the version number will be ignored, and only the url will be used.

1. You can create a cached version of the buildpack using the `--cached` switch with New Relic agent embedded in
the buildpack. This is mainly used in disconnected (isolated) environments where VMware Tanzu does not have access to the
outside world, and the buildpack cannot download the agent from New Relic download site.

1. Use a specific version of New Relic agent by specifying the version in the buildpack manifest file at the time of packaging.

1. Set the version of the agent to `0.0.0.0`, `latest`, or `current` in buildpack manifest file to download the latest version of the agent.

Except in the first case when the download URL is specified, and the SHA256 code is not available
the buildpack checks the SHA256 checksum of the downloaded (or copied) agent to validate the download.

New Relic recommends you use the latest version of New Relic agents unless there is a reason
that keeps you from upgrading to newer releases of the agent.


### <a id='precedence'></a> Order of Precedence

The order of precedence for which method to use to obtain the New Relic agent is from the top to bottom:

1. If `NEW_RELIC_DOWNLOAD_URL` is specified, it precedes all other options.

1. If this environment variable is not specified, the cached buildpack takes precedence.

1. Otherwise, the `version` property of the agent in the buildpack manifest is used,
and one of the other two options is used to download the agent,
depending on the value of the `version` property of the agent dependency (explicit version or `latest`).


## <a id='how-it-operates'></a> How the Extension Buildpack Binds Apps to the New Relic Agent

The buildpack looks for several environment variables and files to determine how
to bind the app to the agent.

The license key for a New Relic account must be specified in one of the following ways:<br>

* `NEW_RELIC_LICENSE_KEY` env var
* License key from user-provided service
* License key from Service Broker tile in the Marketplace
* License key from `newrelic.config` file

<p class="note"><strong>Note:</strong> Environment variables override all other options.</p>
<p class="note"><strong>Note:</strong> To obtain your New Relic account's license key login to New Relic, and from the top right pull-down menu select <code>Account settings</code> option. Copy the license key from the right side of the screen.</p>


### <a id='app-name'></a> App Name in the New Relic UI

The app name for New Relic is determined in the following order:

* `NEW_RELIC_APP_NAME` env var
* App name from <code>user-provided</code> service
* App name from VMware Tanzu (as defined in application manifest)

<p class="note"><strong>Note:</strong> Currently the app name is not used in the
	<code>newrelic.config</code> file.</p>


### <a id='agent-config'></a> New Relic Agent Configuration File

The New Relic configuration file `newrelic.config` allows you to set a number of agent properties and change the behavior of the agent as you want. For more infotmation about configuring the agent, see [.NET agent configuration](https://docs.newrelic.com/docs/agents/net-agent/configuration/net-agent-configuration).


You can make a copy of this file in the app root directory, and change any of the agent settings. The buildpack looks for the agent config file in the following order:

* App root folder
* Buildpack folder
* Agent folder


### <a id='ups'></a> New Relic User-Provided Service

If the app binds to a user provided service with the word `newrelic` as part of its name, the buildpack injects the credentials from this service in the app environment by setting these credentials as environment variables before starting the app.

* If the credential starts with prefix "new\_relic\_", the buildpack ensures the environment variable name is all in upper case.

* Certain credentials without "NEW\_RELIC\_" prefix qualify as New Relic environment variables and are translated by the buildpack:

	+ upper or lower case license\_key, licensekey would translate to "NEW\_RELIC\_LICENSE\_KEY"
	+ upper or lower case app\_name, appname would translate to "NEW\_RELIC\_APP\_NAME"
	+ upper or lower case distributed\_tracing, distributedtracing would translate to "NEW_RELIC\_DISTRIBUTED\_TRACING\_ENABLED"


### <a id='proxy'></a> Use of Proxy

If you are using a proxy server in your environment, you need to make a copy of
the `newrelic.config`file of the agent in the app directory,
and specify the proxy information as a child of the `service` element
For more information about proxy settings, see
[Proxy element](https://docs.newrelic.com/docs/agents/net-agent/configuration/net-agent-configuration#proxy).
<br/><br/>
For example:
<pre>
	&lt;service licenseKey="0123456789abcdef0123456789abcdef01234567"&gt;
	  &lt;proxy host="my.proxy.address" port="proxy.port" /&gt;
	&lt;/service&gt;
</pre>


### <a id='using-nr-agent'></a>Bind Your App to the New Relic Agent

To bind your app to the New Relic service, you need to specify a New Relic
account license key in one of the following ways:

+ [Use a License Key Environment Variable](#using-key-env)
+ [Use a local copy of the New Relic Dotnet Agent](#using-local-copy)
+ [Use New Relic Service Broker for VMware Tanzu](#using-tile)
+ [Use a User-Provided Service](#using-user)
+ [Use the cf CLI](#using-cli)

#### <a id='using-key-env'></a>Use a License Key Environment Variable

The quickest and easiest way to bind your app to the New Relic Dotnet agent is
using the license key environment variable `NEW_RELIC_LICNENSE_KEY` and
setting it using your New Relic account license key.

#### <a id='using-local-copy'></a>Use a Local Copy of the New Relic Dotnet Agent

If you are in a disconnected (isolated) environment, the easiest way is to obtain
the latest version of the New Relic Dotnet agent is through the
[New Relic download site](http://download.newrelic.com/dot_net_agent/).

You can then upload them to your local repository (i.e. Artifactory).
In the app manifest file you can then set the `NEW_RELIC_DOWNLOAD_URL` environment
variable to the location of the agent download.


#### <a id='using-tile'></a>Use New Relic Service Broker for VMware Tanzu
To bind your app to New Relic Dotnet (Core or Framework) agent from the New Relic Service
Broker for VMware Tanzu, do one of the following:

* From Pivotal Services Marketplace:
	1. Click **New Relic Service Broker** tile.
	1. Select the plan that is associated with your New Relic account
	(check with VMware Tanzu admin).
	1. Specify the instance name.
	1. If you have your app running on VMware Tanzu, you can specify the app name
	as well.
	1. If you do not have your app running on VMware Tanzu, after you push the app,
	you can directly bind to an existing service instance (or create a new service
	instance) from the app UI.
	1. To create the service instance, click **Create**.
	1. After the service instance is created, you can also use the `services`
	section in your app `manifest.yml` file, and specify the name of the service
	you just created in the marketplace.
	1. To restage the app, run the following command:

		```
		cf restage MY-APP
		```

		Where:
		`MY-APP` is the name of your app.

* From Apps Manager:
	1. Push your app to VMware Tanzu.
	1. In **Apps Manager**, click your app.
	1. Navigate to **Service**.
	1. Bind your app to New Relic Service.
	    1. If you have already created a service instance, do the following:
		    1. Select **Bind Service**.
		    1. Select the service instance you want.
		    1. Click **Bind**.
	    1. If a service instance does not already exist, create a Service Instance by
	    doing the following:
		    1. Select **New Service**.
		    1. Click the **New Relic Service Broker** tile.
		    1. Select the plan that is associated with your New Relic account.
		    1. Click **Select Plan**.
		    1. Specify the instance name.
		    1. Click **Create**
	1. To restage the app, run the following command:

		```
		cf restage MY-APP
		```

		Where:
		`MY-APP` is the name of your app.

#### <a id='using-user'></a>Use a User-Provided Service
1. Create a user-provided service with `newrelic` as part of the service name.
1. Run the following command:

    ```
    cf cups MY-NEWRELIC-SVCc -p "licenseKey,appName"
    ```

    Where `MY-NEWRELIC-SVC` is the name of your user-provided service. <br><br>

    You are prompted to enter values for licenseKey and appName.<br><br>
	+ `licenseKey`. This is the New Relic license key.
	+ (Optional) `appName`. If you want to change the app name in New Relic
	use this property.


1. To push your app, do one of the following:
	+ Before pushing your app, add the user-provided service to the app
	`manifest.yml`.
	+ Bind an existing service instance and then restage the app.


#### <a id='using-cli'></a>Use the cf CLI
1. To create an instance of New Relic service, run the following command:

	```
	cf create-service newrelic NEWRELIC-PLAN-NAME NEWRELIC-SERVICE-INSTANCE-NAME
	```

	Where:
	+ `NEWRELIC-PLAN-NAME` is the name of your New Relic service plan.
	+ `NEWRELIC-SERVICE-INSTANCE-NAME` is the name of your New Relic service instance.
1. Specify the service instance name in the `services` section of the app
`manifest.yml` file. Indent the section by two spaces.<br><br>
 For example:

	```
		  services:
		  - YOUR-NEWRELIC-SERVICE-INSTANCE-NAME
	```
1. To push the app, run the following command:

	```
	cf push
	```

## <a id='envvar-and-nrconfig'></a>Using Environment Variables and Agent Configuration

You can use the `newrelic.config` file or environment variables to configure the
New Relic Dotnet Agent to report app health and performance to the designated
New Relic account. A copy of the `newrelic.config` file is provided with the
buildpack.

If you need to add any agent features such as proxy settings
or change any other agent settings like logging behavior,
download the `newrelic.config` file from New Relic, place it the app folder,
and edit as required. For more information about what properties are available, see
[New Relic Configuration documentation](https://docs.newrelic.com/docs/agents/net-agent/configuration/net-agent-configuration).

The following are some examples you can use:

- Add your New Relic license key:

	```
	  <service licenseKey="0123456789abcdef0123456789abcdef01234567">
	```

	You can also add the license key to the app `manifest.yml` file as
	an environment variable `NEW_RELIC_LICENSE_KEY` in the `env` section.


- Add New Relic app name:

	If you want the app name in New Relic be different than the app name in VMware Tanzu,
	add the New Relic app name.

	  ```
		<application>
		  <name>My Application</name>
		<application>
	  ```

	You can also add the New Relic app name to the app `manifest.yml`
	file as an environment variable `NEW_RELIC_APP_NAME` in the `env` section.


- Add Proxy Settings: <br>
You can add proxy settings to the `service` element as a sub-element.

```
	  <service licenseKey="0123456789abcdef0123456789abcdef01234567">
	    <proxy host="my_proxy_server.com" port="9090" />
	  <service>
```

- Change Logging Level:<br>
You can change the agent logging level and destination.

```
	  <log level="info" console="true" />
```

## <a id='custom-instrumentation-xml'></a>Using Custom Instrumentation XML Files

If you need to use New Relic agent's custom instrumentation XML files with your app. All you need to do is to copy the custom instrumentation XML file to the application folder.

<p class="note"><strong>Note:</strong> The buildpack looks for a custom instrumentation file in the application folder with the name of <strong><code>newrelic_instrumentation.xml</code></strong> file.</p>

## <a id='non-iis'></a> Non-IIS Executable Instrumentation

Because Dotnet Framework apps `hwc.exe` is the executable
running your app, the copy of `newrelic.config` file that comes with the hwc extension
contains the proper settings to tell the executable name to the agent.

If you provide your own `newrelic.config` file, make sure it contains the
following tag: <br>

```
<instrumentation>
  <applications>
    <application name="hwc.exe" />
  </applications>
</instrumentation>
```

<p class="note"><strong>Note:</strong> Depending on your CI/CD pipeline,
   the app directory may be created on-the-fly as part of the on-the-fly as part of the
   pipeline. If that is the case and you are modifying this file,
   your pipeline need to copy over the file to the app directory before pushing the app to VMware Tanzu.</p>


1. Push your application to VMware Tanzu using this buildpack.
      To do that, edit your `manifest.yml` and add the following entry.

	```
	buildpacks:
	- NEWRELIC_EXTENSION_BUILDPACK_NAME
	- hwc_buildpack
	```

	Where `NEWRELIC_EXTENSION_BUILDPACK_NAME` is the name of New Relic Dotnet Core
        or Dotnet Framework extension.

1. Run `cf push`.

<p class="note"><strong>Note:</strong> If you use Bamboo as your CI/CD pipeline
	tool, <code>cf push</code> may not be required as your pipeline internally
	uses <code>cf push</code> to push the app to VMware Tanzu. </p>

## <a id='envvar-and-nrconfig'></a>Debugging

* Set the `BP_DEBUG` environment variable.
	- For troubleshooting purposes, you can set `BP_DEBUG` environment variable to `true`
	in your app environment to get more logging during the app staging.


* Check the logs.
	- Run `cf logs APP-NAME` or `cf logs APP-NAME --recent`   to examine the app logs.
	It should display the New Relic agent installation progress.


* Use [CF_TRACE](https://docs.cloudfoundry.org/devguide/deploy-apps/troubleshoot-app-health.html#trace-cloud-controller-rest-api-calls)
to get detailed information about errors and unexpected behavior.


## <a id='examples'></a>Examples

### <a id='example-dotnet-core'></a>Push a Sample Dotnet Core App to VMware Tanzu

This example does the following:

+ Uses the `dotnet` CLI to create a sample Dotnet Core app
+ Configures the app manifest to bind the app with New Relic Dotnet Core agent
+ Pushes the app to VMware Tanzu.

The example uses environment variables to specify the license key for the New Relic account.

1. Create a sample Dotnet MVC app or use your existing Dotnet Core app.

    ```
    dotnet new mvc -n myapp
    ```

1. Test the app locally.<br/>

	```
	cd myapp
	dotnet run
	```

1. Create a manifest.yml file for the app.<br/>
  <pre>---
applications:
\- name: myapp
&nbsp; memory: 256M
&nbsp; buildpacks:
&nbsp;   \- nr\_dotnetcore\_extension
&nbsp;   \- dotnet\_core\_buildpack
&nbsp; env:
&nbsp;   NEW\_RELIC\_LICENSE\_KEY: 0123456789abcdef0123456789abcdef01234567
  </pre>

1. To push the app to VMware Tanzu, run the `cf push` command.

1. To [pin the .NET Core SDK to a specific version or version line](https://docs.cloudfoundry.org/buildpacks/dotnet-core/index.html#-specify-.net-core-sdks), create a buildpack.yml file at the app root and add your SDK version:

	```
 	dotnet-core:
		sdk: 5.x
	```


### <a id='example-dotnet-framework'></a>Push a Sample Dotnet Framework App to VMware Tanzu

The following example shows the steps to configure the app manifest to bind a Dotnet Framework app to the
New Relic Dotnet Framework agent using the New Relic HWC extension buildpack and the standard Cloud Foundry
HWC buildpack and to push the app to VMware Tanzu.

The example uses environment variable to specify the license key for the New Relic account.

1. Create a sample Dotnet Framework app or pick one of your Dotnet Framework apps.

1. Test the app locally and make sure it runs with no errors.

1. Create a `manifest.yml` file for the app.
  <pre>---
applications:
\- name: myapp
&nbsp; memory: 256M  # adjust as needed
&nbsp; buildpacks:
&nbsp;   \- nr\_hwc\_extension
&nbsp;   \- hwc\_buildpack
&nbsp; env:
&nbsp;   NEW\_RELIC\_LICENSE\_KEY: 0123456789abcdef0123456789abcdef01234567
  </pre>

1. To push the app to VMware Tanzu, run the `cf push` command.
